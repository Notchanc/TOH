Aim: Regression 

Q1)

A) perform simple linear regression 

code:

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)
Y = np.array([2, 4, 5, 4, 5])

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, Y_train)

y_pred = model.predict(X_test)

print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_}")

mse = mean_squared_error(Y_test, y_pred)
print(f"Mean Squared Error: {mse}")

plt.scatter(X, Y, color='blue', label='Data points')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()


B) perform multiple linear Regression 

code:

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X = np.array([[1, 2], [2,3], [3, 4], [4,5] , [5, 6]])
Y = np.array([2, 4, 5, 4, 5])

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, Y_train)

y_pred = model.predict(X_test)

print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")

mse = mean_squared_error(Y_test, y_pred)
print(f"Mean Squared Error: {mse}")


C) perform polynomial Regression 

code:

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X = np.array([[1, 2, 3, 4, 5]]).reshape(-1, 1)
Y = np.array([1, 4, 9, 16, 25])

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

poly = PolynomialFeatures(degree=2)
X_poly_train = poly.fit_transform(X_train)
X_poly_test = poly.transform(X_test)

model = LinearRegression()
model.fit(X_poly_train, Y_train)

y_poly_pred = model.predict(X_poly_test)

print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")

mse = mean_squared_error(Y_test, y_poly_pred)
print(f"Mean Squared Error: {mse}")

plt.scatter(X, Y, color='blue', label='Data points')
plt.plot(X, model.predict(poly.transform(X)), color='red', label='Polynomial Regression Curve')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()
